// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlayerTransforms.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hrm {

  /// <summary>Holder for reflection information generated from PlayerTransforms.proto</summary>
  public static partial class PlayerTransformsReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerTransforms.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerTransformsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQbGF5ZXJUcmFuc2Zvcm1zLnByb3RvEgNocm0aDENvbW1vbi5wcm90byL/",
            "AQoPUGxheWVyVHJhbnNmb3JtEgoKAmlkGAEgASgFEh4KCHBvc2l0aW9uGAIg",
            "ASgLMgwuaHJtLlBvaW50M0QSHgoIcm90YXRpb24YAyABKAsyDC5ocm0uUG9p",
            "bnQ0RBInChFyaWdodEhhbmRQb3NpdGlvbhgEIAEoCzIMLmhybS5Qb2ludDNE",
            "EicKEXJpZ2h0SGFuZFJvdGF0aW9uGAUgASgLMgwuaHJtLlBvaW50NEQSJgoQ",
            "bGVmdEhhbmRwb3NpdGlvbhgGIAEoCzIMLmhybS5Qb2ludDNEEiYKEGxlZnRI",
            "YW5kcm90YXRpb24YByABKAsyDC5ocm0uUG9pbnQ0RGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Hrm.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hrm.PlayerTransform), global::Hrm.PlayerTransform.Parser, new[]{ "Id", "Position", "Rotation", "RightHandPosition", "RightHandRotation", "LeftHandposition", "LeftHandrotation" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerTransform : pb::IMessage<PlayerTransform>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerTransform> _parser = new pb::MessageParser<PlayerTransform>(() => new PlayerTransform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTransform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hrm.PlayerTransformsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTransform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTransform(PlayerTransform other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      rightHandPosition_ = other.rightHandPosition_ != null ? other.rightHandPosition_.Clone() : null;
      rightHandRotation_ = other.rightHandRotation_ != null ? other.rightHandRotation_.Clone() : null;
      leftHandposition_ = other.leftHandposition_ != null ? other.leftHandposition_.Clone() : null;
      leftHandrotation_ = other.leftHandrotation_ != null ? other.leftHandrotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTransform Clone() {
      return new PlayerTransform(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Hrm.Point3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Hrm.Point4D rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point4D Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "rightHandPosition" field.</summary>
    public const int RightHandPositionFieldNumber = 4;
    private global::Hrm.Point3D rightHandPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point3D RightHandPosition {
      get { return rightHandPosition_; }
      set {
        rightHandPosition_ = value;
      }
    }

    /// <summary>Field number for the "rightHandRotation" field.</summary>
    public const int RightHandRotationFieldNumber = 5;
    private global::Hrm.Point4D rightHandRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point4D RightHandRotation {
      get { return rightHandRotation_; }
      set {
        rightHandRotation_ = value;
      }
    }

    /// <summary>Field number for the "leftHandposition" field.</summary>
    public const int LeftHandpositionFieldNumber = 6;
    private global::Hrm.Point3D leftHandposition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point3D LeftHandposition {
      get { return leftHandposition_; }
      set {
        leftHandposition_ = value;
      }
    }

    /// <summary>Field number for the "leftHandrotation" field.</summary>
    public const int LeftHandrotationFieldNumber = 7;
    private global::Hrm.Point4D leftHandrotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hrm.Point4D LeftHandrotation {
      get { return leftHandrotation_; }
      set {
        leftHandrotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTransform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTransform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(RightHandPosition, other.RightHandPosition)) return false;
      if (!object.Equals(RightHandRotation, other.RightHandRotation)) return false;
      if (!object.Equals(LeftHandposition, other.LeftHandposition)) return false;
      if (!object.Equals(LeftHandrotation, other.LeftHandrotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (rightHandPosition_ != null) hash ^= RightHandPosition.GetHashCode();
      if (rightHandRotation_ != null) hash ^= RightHandRotation.GetHashCode();
      if (leftHandposition_ != null) hash ^= LeftHandposition.GetHashCode();
      if (leftHandrotation_ != null) hash ^= LeftHandrotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (rightHandPosition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RightHandPosition);
      }
      if (rightHandRotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RightHandRotation);
      }
      if (leftHandposition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LeftHandposition);
      }
      if (leftHandrotation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LeftHandrotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (rightHandPosition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RightHandPosition);
      }
      if (rightHandRotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RightHandRotation);
      }
      if (leftHandposition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LeftHandposition);
      }
      if (leftHandrotation_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LeftHandrotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (rightHandPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightHandPosition);
      }
      if (rightHandRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightHandRotation);
      }
      if (leftHandposition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftHandposition);
      }
      if (leftHandrotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftHandrotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTransform other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Hrm.Point3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::Hrm.Point4D();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.rightHandPosition_ != null) {
        if (rightHandPosition_ == null) {
          RightHandPosition = new global::Hrm.Point3D();
        }
        RightHandPosition.MergeFrom(other.RightHandPosition);
      }
      if (other.rightHandRotation_ != null) {
        if (rightHandRotation_ == null) {
          RightHandRotation = new global::Hrm.Point4D();
        }
        RightHandRotation.MergeFrom(other.RightHandRotation);
      }
      if (other.leftHandposition_ != null) {
        if (leftHandposition_ == null) {
          LeftHandposition = new global::Hrm.Point3D();
        }
        LeftHandposition.MergeFrom(other.LeftHandposition);
      }
      if (other.leftHandrotation_ != null) {
        if (leftHandrotation_ == null) {
          LeftHandrotation = new global::Hrm.Point4D();
        }
        LeftHandrotation.MergeFrom(other.LeftHandrotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Hrm.Point3D();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            if (rightHandPosition_ == null) {
              RightHandPosition = new global::Hrm.Point3D();
            }
            input.ReadMessage(RightHandPosition);
            break;
          }
          case 42: {
            if (rightHandRotation_ == null) {
              RightHandRotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(RightHandRotation);
            break;
          }
          case 50: {
            if (leftHandposition_ == null) {
              LeftHandposition = new global::Hrm.Point3D();
            }
            input.ReadMessage(LeftHandposition);
            break;
          }
          case 58: {
            if (leftHandrotation_ == null) {
              LeftHandrotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(LeftHandrotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Hrm.Point3D();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            if (rightHandPosition_ == null) {
              RightHandPosition = new global::Hrm.Point3D();
            }
            input.ReadMessage(RightHandPosition);
            break;
          }
          case 42: {
            if (rightHandRotation_ == null) {
              RightHandRotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(RightHandRotation);
            break;
          }
          case 50: {
            if (leftHandposition_ == null) {
              LeftHandposition = new global::Hrm.Point3D();
            }
            input.ReadMessage(LeftHandposition);
            break;
          }
          case 58: {
            if (leftHandrotation_ == null) {
              LeftHandrotation = new global::Hrm.Point4D();
            }
            input.ReadMessage(LeftHandrotation);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
